//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "es_aggregates")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub version: i32,
    pub aggregate_type: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::es_aggregate_snapshots::Entity")]
    EsAggregateSnapshots,
    #[sea_orm(has_many = "super::es_events::Entity")]
    EsEvents,
}

impl Related<super::es_aggregate_snapshots::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EsAggregateSnapshots.def()
    }
}

impl Related<super::es_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EsEvents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
