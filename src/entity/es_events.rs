//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "es_events")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub aggregate_id: Uuid,
    pub version: i32,
    #[sea_orm(column_type = "Text")]
    pub event_type: String,
    pub json_data: Json,
    pub meta_data: Json,
    pub create_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::es_aggregates::Entity",
        from = "Column::AggregateId",
        to = "super::es_aggregates::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EsAggregates,
}

impl Related<super::es_aggregates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EsAggregates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
